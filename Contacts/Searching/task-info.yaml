type: edu
custom_name: stage4
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import contacts.Main;\nimport org.hyperskill.hstest.stage.StageTest;\nimport\
    \ org.hyperskill.hstest.testcase.CheckResult;\nimport org.hyperskill.hstest.testcase.TestCase;\n\
    \nimport java.util.List;\nimport java.util.function.Function;\n\n\nclass TestClue\
    \ {\n\n    Function<String, CheckResult> callback;\n\n    TestClue(Function<String,\
    \ CheckResult> callback) {\n        this.callback = callback;\n    }\n}\n\n\n\
    public class ContactsTest extends StageTest<TestClue> {\n\n    public ContactsTest()\
    \ {\n        super(Main.class);\n    }\n    private CheckResult splitActionsFeedback(int\
    \ actualSize, int needSize) {\n        if (actualSize < needSize) {\n        \
    \    return CheckResult.wrong(String.format(\"This test should contain at least\
    \ %d actions, but you have only %d. \" +\n                            \"You should\
    \ separate your actions with an empty line.\",\n                    needSize,\n\
    \                    actualSize));\n        } else {\n            return null;\n\
    \        }\n    }\n    \n    @Override\n    public List<TestCase<TestClue>> generate()\
    \ {\n        return List.of (\n            new TestCase<TestClue>()\n        \
    \        .setInput(\"exit\")\n                .setAttach(new TestClue(output ->\
    \ {\n                    output = output.strip().toLowerCase();\n            \
    \        if (!output.contains(\"enter action\")) {\n                        return\
    \ new CheckResult(false,\n                            \"No \\\"Enter action\\\"\
    \ substring found in the output\");\n                    }\n                 \
    \   return CheckResult.correct();\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"count\\n\" +\n            \
    \        \"exit\")\n                .setAttach(new TestClue(output -> {\n    \
    \                output = output.strip().toLowerCase();\n                    if\
    \ (!output.contains(\"0 records\")) {\n                        return new CheckResult(false,\n\
    \                            \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    }\n\
    \                }\n                return new CheckResult(false,\n          \
    \              \"Search by phone number is not working\");\n            }))\n\
    \        );\n    }\n\n    @Override\n    public CheckResult check(String reply,\
    \ TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/contact_factory/OrganizationFactory.java
  visible: true
  text: |
    package contacts.contact_factory;

    import contacts.contact.Contact;
    import contacts.contact.OrganizationContact;

    import java.util.Scanner;

    public class OrganizationFactory implements Factory{
        @Override
        public Contact createContact() {
            Scanner scanner = new Scanner(System.in);

            System.out.println("Enter the organization name:");
            String name = scanner.nextLine();

            System.out.println("Enter the address:");
            String address = scanner.nextLine();

            System.out.println("Enter the number:");
            String number = scanner.nextLine();

            return new OrganizationContact(number, name, address);
        }
    }
  learner_created: true
- name: src/contacts/contact/PersonContact.java
  visible: true
  text: |
    package contacts.contact;

    import java.time.LocalDate;

    public class PersonContact extends Contact {
        private String name;
        private String surname;
        private String gender;
        private LocalDate birthDate;

        public PersonContact(String name, String surname) {
            super();
            this.name = name;
            this.surname = surname;
            isPerson = true;
        }

        public String getName() {
            return name;
        }

        public String getSurname() {
            return surname;
        }

        public String getGender() {
            return gender;
        }

        public LocalDate getBirthDate() {
            return birthDate;
        }

        public void setGender(String gender) {
            if (gender.equals("M") || gender.equals("F")) {
                this.gender = gender;
            } else {
                this.gender = "[no data]";
                System.out.println("Bad gender!");
            }
        }

        public void setBirthDate(String birthDate) {
            try {
                this.birthDate = LocalDate.parse(birthDate);
            } catch (Exception e) {
                System.out.println("Bad birth date!");
            }
        }

        public void setName(String name) {
            this.name = name;
        }

        public void setSurname(String surname) {
            this.surname = surname;
        }

        @Override
        public String toString() {

            String number = this.number.length() == 0 ? "[no number]" : this.number;
            String birthDate = this.birthDate == null ? "[no data]" : this.birthDate.toString();


            return String.format("Name: %s\n" +
                    "Surname: %s\n" +
                    "Birth date: %s\n" +
                    "Gender: %s\n" +
                    "Number: %s\n" +
                    "Time created: %s\n" +
                    "Time last edit: %s\n", name, surname, birthDate, gender, number, timeCreated, timeLastEdit);
        }
    }
  learner_created: true
- name: src/contacts/contact_factory/Factory.java
  visible: true
  text: |
    package contacts.contact_factory;

    import contacts.contact.Contact;

    public interface Factory {

        Contact createContact();

    }
  learner_created: true
- name: src/contacts/contact/Contact.java
  visible: true
  text: |
    package contacts.contact;

    import java.time.LocalDateTime;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Contact {

        protected String number = "";
        protected boolean isPerson;
        protected final LocalDateTime timeCreated;
        protected LocalDateTime timeLastEdit;

        public Contact() {
            timeCreated = LocalDateTime.now().withSecond(0).withNano(0);
            timeLastEdit = LocalDateTime.now().withSecond(0).withNano(0);
        }

        public String getNumber() {
            return number;
        }

        public void setNumber(String number) {
            if (checkNumber(number)){
                this.number = number;
            } else {
                this.number = "";
                System.out.println("Wrong number format!");
            }
        }

        private boolean checkNumber(String number) {
            Pattern pattern = Pattern.compile("^\\+?(([\\d\\w]+)?[- ]?\\(?[\\d\\w]{2,}\\)?)?[ -]?([ -]?[\\d\\w]{2,}[ -]?)*|[\\d\\w]+");
            Matcher matcher = pattern.matcher(number);

            return matcher.matches();
        }

        public void updateTimeEdit() {
            timeLastEdit = LocalDateTime.now().withSecond(0).withNano(0);
        }

        public boolean isPerson() {
            return isPerson;
        }

        public LocalDateTime getTimeCreated() {
            return timeCreated;
        }

        public LocalDateTime getTimeLastEdit() {
            return timeLastEdit;
        }
    }
  learner_created: true
- name: src/contacts/contact/OrganizationContact.java
  visible: true
  text: |
    package contacts.contact;


    public class OrganizationContact extends Contact {

        private String organizationName;
        private String address;

        public OrganizationContact(String number, String organizationName, String address) {
            super();
            this.organizationName = organizationName;
            this.address = address;
            setNumber(number);
        }

        public String getOrganizationName() {
            return organizationName;
        }

        public String getAddress() {
            return address;
        }

        public void setOrganizationName(String organizationName) {
            this.organizationName = organizationName;
        }

        public void setAddress(String address) {
            this.address = address;
        }

        @Override
        public String toString() {

            String number = this.number.length() == 0 ? "[no number]" : this.number;

            return String.format("Organization name: %s\n" +
                    "Address: %s\n" +
                    "Number: %s\n" +
                    "Time created: %s\n" +
                    "Time last edit: %s\n", organizationName, address, number, timeCreated, timeLastEdit);
        }
    }
  learner_created: true
- name: src/contacts/contact_factory/PersonFactory.java
  visible: true
  text: |
    package contacts.contact_factory;

    import contacts.contact.Contact;
    import contacts.contact.PersonContact;

    import java.util.Scanner;

    public class PersonFactory implements Factory{

        @Override
        public Contact createContact() {
            Scanner scanner = new Scanner(System.in);

            System.out.println("Enter the name:");
            String name = scanner.nextLine();

            System.out.println("Enter the surname:");
            String surname = scanner.nextLine();

            PersonContact contact = new PersonContact(name, surname);

            System.out.println("Enter the birth date:");
            contact.setBirthDate(scanner.nextLine());

            System.out.println("Enter the gender (M, F):");
            contact.setGender(scanner.nextLine());

            System.out.println("Enter the number:");
            contact.setNumber(scanner.nextLine());

            return contact;
        }
    }
  learner_created: true
- name: src/contacts/app/ContactsApp.java
  visible: true
  text: |
    package contacts.app;

    import contacts.contact.Contact;
    import contacts.contact.OrganizationContact;
    import contacts.contact.PersonContact;
    import contacts.contact_factory.Factory;
    import contacts.contact_factory.OrganizationFactory;
    import contacts.contact_factory.PersonFactory;

    import java.util.ArrayList;
    import java.util.List;

    public class ContactsApp {

        private final List<Contact> contacts = new ArrayList<>();


        public String add(String type) {

            Factory factory;
            switch (type) {
                case "person":
                    factory = new PersonFactory();
                    contacts.add(factory.createContact());
                    break;
                case "organization":
                    factory = new OrganizationFactory();
                    contacts.add(factory.createContact());
                    break;
                default:
                    return "Unknown operation!\n";
            }

            return "The record added.\n";
        }


        public String remove(int record) {

            if (record < contacts.size() && record >= 0) {
                contacts.remove(record);
                return "The record removed!\n";
            } else {
                return  "Wrong number!\n";
            }
        }

        public String list () {

            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < contacts.size(); i++) {
                builder.append(i + 1).append(". ");
                if (contacts.get(i).isPerson()) {
                    builder.append(((PersonContact) contacts.get(i)).getName())
                            .append(" ")
                            .append(((PersonContact) contacts.get(i)).getSurname());
                } else {
                    builder.append(((OrganizationContact) contacts.get(i)).getOrganizationName());
                }
                builder.append("\n");
            }
            return builder.toString();
        }

        public int count() {
            return contacts.size();
        }

        public boolean checkEmpty() {
            return contacts.isEmpty();
        }


        public String getInfo(String nextLine) {
            return contacts.get(Integer.parseInt(nextLine) - 1).toString();
        }

        public String getContact(int index) {
            if (contacts.get(index).isPerson()) {
                return "Select a field (name, surname, birth, gender, number): ";
            } else {
                return "Select a field (organization name, address, number): ";
            }
        }

        public void updateName(int record, String name) {
            PersonContact contact = ((PersonContact) contacts.get(record));
            contact.setName(name);
            contact.updateTimeEdit();;
        }

        public void updateSurname(int record, String surname) {
            PersonContact contact = ((PersonContact) contacts.get(record));
            contact.setSurname(surname);
            contact.updateTimeEdit();
        }

        public void updateNumber(int record, String number) {
            contacts.get(record).setNumber(number);
            contacts.get(record).updateTimeEdit();
        }


        public void updateBirth(int record, String birth) {
            PersonContact contact = ((PersonContact) contacts.get(record));
            contact.setBirthDate(birth);
            contact.updateTimeEdit();
        }

        public void updateGender(int record, String gender) {
            PersonContact contact = ((PersonContact) contacts.get(record));
            contact.setGender(gender);
            contact.updateTimeEdit();
        }

        public void updateAddress(int record, String address) {
            OrganizationContact contact = ((OrganizationContact) contacts.get(record));
            contact.setAddress(address);
            contact.updateTimeEdit();
        }

        public void updateOrganizationName(int record, String name) {
            OrganizationContact contact = ((OrganizationContact) contacts.get(record));
            contact.setOrganizationName(name);
            contact.updateTimeEdit();
        }
    }
  learner_created: true
- name: src/contacts/app/Controller.java
  visible: true
  learner_created: true
- name: src/contacts/app/menu/ListMenu.java
  visible: true
  learner_created: true
- name: src/contacts/app/menu/SearchMenu.java
  visible: true
  learner_created: true
- name: src/contacts/app/menu/RecordMenu.java
  visible: true
  learner_created: true
- name: src/contacts/app/menu/Menu.java
  visible: true
  learner_created: true
- name: src/contacts/app/menu/MainMenu.java
  visible: true
  learner_created: true
- name: testing.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/43/stages/231/implement#comment
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/43/stages/231/implement">JetBrains
    Academy</a>
  time: Sun, 22 Nov 2020 17:40:43 UTC
record: -1
